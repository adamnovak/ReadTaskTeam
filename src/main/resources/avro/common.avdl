@namespace("org.ga4gh.models")
/**
This protocol defines common types used in the other GA4GH protocols. It does
not have any methods; it is merely a library of types.

Many of these types are related to defining sequence graphs. A sequence graph is
a set of linear, possibly empty sequences, where each end of each sequence can
join onto a side of a base in another sequence. The sequence being joined onto
is a "parent" of the other sequence, which is a "child", and the graph is
constrained such that parent-child relationships are acyclic.

A sequence graph is represented by a set of `Segment`s, selecting the regions of
sequence and describing the end joins that make up the graph.

A `Path` through a sequence graph is an array of `Segment`s covering subregions
of sequences from the graph. Each pair of consecutive `Segment`s is connected by
a join from the graph.
*/
protocol Common {

/**
Indicates the DNA strand associate for some data item.
* `POS_STRAND`:  The postive (+) strand.
* `NEG_STRAND`: The negative (-) strand.
* `NO_STRAND`: Strand-independent data or data where the strand can not be determined.
*/
enum Strand {
  POS_STRAND,
  NEG_STRAND,
  NO_STRAND
}

/**
An abstraction for referring to a genomic position, in relation to some already
known sequence. For now, represents a genomic position as a reference name or
sequence ID, a base number on that reference (0-based), and a flag to say if
it's the forward or reverse strand that we're talking about.
*/
record Position {
  /**
  The name of the reference (or, more technically, the scaffold) in whatever
  reference set is being used. Does not generally include a "chr" prefix, so for
  example "X" would be used for the X chromosome.

  If `sequenceId` is null, this must not be null.
  */
  union { null, string } referenceName = null;

  /**
  The ID of the sequence on which the `Position` is located. This may be a
  `Reference` sequence, or a novel piece of sequence associated with a
  `VariantSet`.

  If `referenceName` is null, this must not be null.
  */
  union { null, string } sequenceId = null;

  /**
  The 0-based offset from the start of the forward strand for that reference.
  Genomic positions are non-negative integers less than reference length.
  */
  long position;

  /**
  Strand the position is associated with. `POS_STRAND` represents the forward
  strand, or equivalently the left side of a base, and `NEG_STRAND` represents
  the reverse strand, or equivalently the right side of a base.
  */
  Strand strand;
}

/**
A `Segment` represents a piece of sequence, which is optionally joined onto
other `Segment`s of sequence at each end, forming a graph. The bases for a
sequence are available through the `getSequence` API call.
*/
record Segment {
  /**
  The sequence ID and start index of this `Segment`. This base is always
  included in the segment, regardless of strand.
  */
  Position start;

  /**
  The length of this `Segment`'s sequence. If `start` is on the forward strand,
  the `Segment` contains the range [`start.position`, `start.position` +
  `length`). If `start` is on the reverse strand, the `Segment` contains the
  range (`start.position` - `length`, `start.position`]. This is equivalent to
  starting from the side indicated by `start`, and traversing through that base
  out to the specified length.
  */
  long length;

  /**
  Start and end `Position`s where this `Segment` attaches to other sequences.
  Note that the segmentId for start and end might not be the same. The
  `Segment`s covering the sequences onto which this `Segment` is joined are
  called its "parents".

  Joins may occur on the outer sides of the terminal bases in a sequence: the
  left side of the base at index 0, and the right side of the base with maximum
  index. These are the "terminal sides" of the sequence.
  
  `startJoin` is the join on the side indicated by `start`, and may only be set
  if that side is a terminal side. Similarly, `endJoin` is the join on the
  opposite side of the piece of sequence selected by the segment, and may only
  be set if that side is a terminal side.
  
  The value of `startJoin` or `endJoin`, if set, is the side to which the
  corresponding side of this `Sequence` is connected.
  */
  union { null, Position } startJoin, endJoin;
}

/**
A `Path` is an ordered list of `Segment`s. In general any contiguous path
through a sequence graph, with no novel adjacencies, can be represented by a
`Path`.
*/
record Path {
  /**
  We require that one of each consecutive pair of `Segment`s in a `Path` be
  joined onto the other.
  */
  array<Segment> segments = [];
}

/**
An enum for the different types of CIGAR alignment operations that exist.
Used wherever CIGAR alignments are used. The different enumerated values
have the following usage:

* `ALIGNMENT_MATCH`: An alignment match indicates that a sequence can be
  aligned to the reference without evidence of an INDEL. Unlike the
  `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators, the `ALIGNMENT_MATCH`
  operator does not indicate whether the reference and read sequences are an
  exact match. This operator is equivalent to SAM's `M`.
* `INSERT`: The insert operator indicates that the read contains evidence of
  bases being inserted into the reference. This operator is equivalent to
  SAM's `I`.
* `DELETE`: The delete operator indicates that the read contains evidence of
  bases being deleted from the reference. This operator is equivalent to
  SAM's `D`.
* `SKIP`: The skip operator indicates that this read skips a long segment of
  the reference, but the bases have not been deleted. This operator is
  commonly used when working with RNA-seq data, where reads may skip long
  segments of the reference between exons. This operator is equivalent to
  SAM's 'N'.
* `CLIP_SOFT`: The soft clip operator indicates that bases at the start/end
  of a read have not been considered during alignment. This may occur if the
  majority of a read maps, except for low quality bases at the start/end of
  a read. This operator is equivalent to SAM's 'S'. Bases that are soft clipped
  will still be stored in the read.
* `CLIP_HARD`: The hard clip operator indicates that bases at the start/end of
  a read have been omitted from this alignment. This may occur if this linear
  alignment is part of a chimeric alignment, or if the read has been trimmed
  (e.g., during error correction, or to trim poly-A tails for RNA-seq). This
  operator is equivalent to SAM's 'H'.
* `PAD`: The pad operator indicates that there is padding in an alignment.
  This operator is equivalent to SAM's 'P'.
* `SEQUENCE_MATCH`: This operator indicates that this portion of the aligned
  sequence exactly matches the reference (e.g., all bases are equal to the
  reference bases). This operator is equivalent to SAM's '='.
* `SEQUENCE_MISMATCH`: This operator indicates that this portion of the
  aligned sequence is an alignment match to the reference, but a sequence
  mismatch (e.g., the bases are not equal to the reference). This can
  indicate a SNP or a read error. This operator is equivalent to SAM's 'X'.
*/
enum CigarOperation {
  ALIGNMENT_MATCH,
  INSERT,
  DELETE,
  SKIP,
  CLIP_SOFT,
  CLIP_HARD,
  PAD,
  SEQUENCE_MATCH,
  SEQUENCE_MISMATCH
}

/**
A structure for an instance of a CIGAR operation.
*/
record CigarUnit {
  /** The operation type. */
  CigarOperation operation;

  /** The number of bases that the operation runs for. */
  long operationLength;

  /**
  `referenceSequence` is only used at mismatches (`SEQUENCE_MISMATCH`)
  and deletions (`DELETE`). Filling this field replaces the MD tag.
  If the relevant information is not available, leave this field as `null`.
  */
  union { null, string } referenceSequence = null;
}

}
