@namespace("org.ga4gh.models")

protocol References {

import idl "common.avdl";

/**
A `Reference` is a canonical assembled contig, intended to act as a
reference coordinate space for other genomic annotations. A single
`Reference` might represent the human chromosome 1, for instance.
*/
record Reference {

  /**
  The `Segment` describing this `Reference`'s sequence in the `ReferenceSet`'s
  sequence graph.

  The `Segment` will generally cover the entirety of the sequence, but may be
  shorter if only a subrange of a sequence is to be included in the
  `ReferenceSet`.

  The sequence ID of the `Segment` is equal to ID of the `Reference`. The actual
  sequence bases for a `Reference` are available through the `getSequence` API
  call on this `Reference`'s sequence.

  If this is not null, `graphChecksum` must also not be null.
  */
  union { null, org.ga4gh.models.graph.Segment } segment = null;

  /**
  MD5 checksum uniquely representing this `Reference` and its position in the
  `ReferenceSet`'s sequence graph, as a lower-case hexadecimal string.

  If segment.startJoin and segment.endJoin are both null, this is equal to
  md5checksum.

  Otherwise, this is the MD5 of the md5checksum, segment.startJoin's MD5
  checksum, and segment.endJoin's MD5 checksum, in that order. If one
  SegmentJoinLocation is null, an MD5 checksum consisting of 32 "0" chartacters
  is used for its contribution.

  The MD5 checksum of a `Position` on a sequence with a `Reference` is
  calculated by MD5 hashing the concatenation of the md5checksum for that
  `Reference`, the index as a decimal string, and "+" or "-" as appropriate
  for the `SegmentSide`, in that order.

  Note that a `Reference`'s sequence may not join onto itself, or anything that
  joins onto it, or this hash would not be defined.

  If this is not null, `segment` must also not be null.
  */
  union { null, string } structuralMd5Checksum = null;

  /**
  The reference ID. Unique within the repository. If null, `segment` must be
  set.
  */
  union { null, string } id = null;

  /** The length of this reference's sequence. */
  long length;

  /**
  MD5 of the upper-case sequence excluding all whitespace characters
  (this is equivalent to SQ:M5 in SAM).
  */
  string md5checksum;

  /**
  The name of this reference. (e.g. '22') Also see the
  `names` field on the parent `ReferenceSet`.
  */
  string name;

  /**
  The URI from which the sequence was obtained.
  Specifies a FASTA format file/string with one name, sequence pair.
  In most cases, clients should call the `getSequence()` or
  `getReferenceBases()` methods to obtain sequence bases for a `Reference`
  instead of attempting to retrieve this URI.
  */
  union { null, string } sourceURI = null;

  /**
  All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally
  with a version number, e.g. `GCF_000001405.26`.
  */
  array<string> sourceAccessions;

  /**
  A sequence X is said to be derived from source sequence Y, if X and Y
  are of the same length and the per-base sequence divergence at A/C/G/T bases
  is sufficiently small. Two sequences derived from the same official
  sequence share the same coordinates and annotations, and
  can be replaced with the official sequence for certain use cases.
  */
  boolean isDerived = false;

  /**
  The `sourceDivergence` is the fraction of non-indel bases that do not match the
  reference this record was derived from.
  */
  union { null, float } sourceDivergence = null;

  /** ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human). */
  union { null, int } ncbiTaxonId = null;
}

/**
A `ReferenceSet` is a set of `Reference`s which typically comprise a
reference assembly, such as `GRCh38`. A `ReferenceSet` defines a common
coordinate space for comparing reference-aligned experimental data.
*/
record ReferenceSet {
  /** The reference set ID. Unique in the repository. */
  string id;

  /**
  The IDs of the `Reference` objects that are part of this set.

  These may also be obtained through a `searchReferences()` call.
  */
  union { null, array<string> } referenceIds = null;

  /**
  Order-independent MD5 checksum which identifies this `ReferenceSet`. The
  checksum is computed by sorting all `reference.md5checksum` (for all
  `reference` in this set) in ascending lexicographic order, concatenating,
  and taking the MD5 of that value.

  If not set, `structuralMd5Checksum` must be set.
  */
  union { null, string } md5checksum = null;

  /**
  Order-independent MD5 checksum which identifies this `ReferenceSet`. The
  checksum is computed by sorting all `reference.structuralMd5Checksum` (for all
  `reference` in this set) in ascending lexicographic order, concatenating,
  and taking the MD5 of that value.

  If not set, `md5checksum` must be set.
  */
  union { null, string } structuralMd5Checksum = null;

  /**
  ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human) indicating
  the species which this assembly is intended to model. Note that contained
  `Reference`s may specify a different `ncbiTaxonId`, as assemblies may
  contain reference sequences which do not belong to the modeled species, e.g.
  EBV in a human reference genome.
  */
  union { null, int } ncbiTaxonId = null;

  /** Optional free text description of this reference set. */
  union { null, string } description = null;

  // next information about the source of the sequences

  /** Public id of this reference set, such as `GRCh37`. */
  union { null, string } assemblyId = null;

  /** Specifies a FASTA format file/string. */
  union { null, string } sourceURI = null;

  /**
  All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally
  with a version number, e.g. `NC_000001.11`.
  */
  array<string> sourceAccessions;

  /**
  A reference set may be derived from a source if it contains
  additional sequences, or some of the sequences within it are derived
  (see the definition of `isDerived` in `Reference`).
  */
  boolean isDerived = false;
}

}
