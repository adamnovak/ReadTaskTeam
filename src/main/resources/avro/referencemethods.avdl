@namespace("org.ga4gh.methods")
protocol ReferenceMethods {

import idl "common.avdl";
import idl "methods.avdl";
import idl "references.avdl";

/****************  /mode/{mode}  *******************/
/*
See if the server will return fields necessary for interpreting data in the
given mode. If the server supports a mode, it must serve the string "true" at
this URL, and this method will return true on the client side. If the server
does not support a mode, it must return "false".

If the server supports a mode, all fields that that mode requires must be filled
in the server's responses.

Valid modes are currently "classic" and "graph", with the "graph" mode to be
prefered by new client and server implementations.
*/
boolean sendsMode(
  /**
  The mode to ask about.
  */
  string mode) throws GAException;

/****************  /referencesets/search  *******************/
/**
This request maps to the body of `POST /referencesets/search`
as JSON.
*/
record SearchReferenceSetsRequest {
  /**
  If nonempty, return the reference sets which match any of the given
  `md5checksum`s. See `ReferenceSet::md5checksum` for details.
  */
  array<string> md5checksums = [];

  /**
  If nonempty, return reference sets for which the accession
  matches this string. Best to give a version number (e.g. `GCF_000001405.26`).
  If only the main accession number is given then all records with
  that main accession will be returned, whichever version.
  Note that different versions will have different sequences.
  */
  array<string> accessions = [];

  /**
  If present, return reference sets for which the `assemblyId`
  contains this string.
  */
  union { null, string } assemblyId = null;

  /**
  Specifies the maximum number of results to return in a single page.
  If unspecified, a system default will be used.
  */
  union { null, int } pageSize = null;

  /**
  The continuation token, which is used to page through large result sets.
  To get the next page of results, set this parameter to the value of
  `nextPageToken` from the previous response.
  */
  union { null, string } pageToken = null;
}

/**
This is the response from `POST /referencesets/search`
expressed as JSON.
*/
record SearchReferenceSetsResponse {
  /** The list of matching reference sets. */
  array<org.ga4gh.models.ReferenceSet> referenceSets = [];

  /**
  The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.
  */
  union { null, string } nextPageToken = null;
}

/**
Gets a list of `ReferenceSet` matching the search criteria.

`POST /referencesets/search` must accept a JSON version of
`SearchReferenceSetsRequest` as the post body and will return a JSON
version of `SearchReferenceSetsResponse`.
*/
SearchReferenceSetsResponse searchReferenceSets(
  /**
  This request maps to the body of `POST /referencesets/search`
  as JSON.
  */
  SearchReferenceSetsRequest request) throws GAException;

/****************  /referencesets/{id}  *******************/
/**
Gets a `ReferenceSet` by ID.
`GET /referencesets/{id}` will return a JSON version of `ReferenceSet`.
*/
org.ga4gh.models.ReferenceSet getReferenceSet(
  /**
  The ID of the `ReferenceSet`.
  */
  string id) throws GAException;

/****************  /references/search  *******************/
/**
This request maps to the body of `POST /references/search`
as JSON.
*/
record SearchReferencesRequest {
  /**
  If present, return only references which belong to this reference set.
  */
  union { null, string } referenceSetId = null;
  
  /**
  If nonempty, return only `Reference`s on `Sequence`s with IDs in the list.
  */
  union { null, string } sequenceIds = [];

  /**
  If nonempty, return references which match any of the given `md5checksums`.
  See `Reference::md5checksum` for details.
  */
  array<string> md5checksums = [];

  /**
  If nonempty, return references for which the accession
  matches this string. Best to give a version number e.g. `GCF_000001405.26`.
  If only the main accession number is given then all records with
  that main accession will be returned, whichever version.
  Note that different versions will have different sequences.
  */
  array<string> accessions = [];

  /**
  If nonempty, return references that have one of the specified names. The name
  specified must match the reference's name exactly, and is case sensitive.
  */
  array<string> referenceNames = [];

  /**
  Specifies the maximum number of results to return in a single page.
  If unspecified, a system default will be used.
  */
  union { null, int } pageSize = null;

  /**
  The continuation token, which is used to page through large result sets.
  To get the next page of results, set this parameter to the value of
  `nextPageToken` from the previous response.
  */
  union { null, string } pageToken = null;
}

/**
This is the response from `POST /references/search` expressed as JSON.
*/
record SearchReferencesResponse {
  /** The list of matching references. */
  array<org.ga4gh.models.Reference> references = [];

  /**
  The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.
  */
  union { null, string } nextPageToken = null;
}

/**
Gets a list of `Reference` matching the search criteria.

`POST /references/search` must accept a JSON version of
`SearchReferencesRequest` as the post body and will return a JSON
version of `SearchReferencesResponse`.
*/
SearchReferencesResponse searchReferences(
  /**
  This request maps to the body of `POST /references/search`
  as JSON.
  */
  SearchReferencesRequest request) throws GAException;

/****************  /references/{id}  *******************/
/**
Gets a `Reference` by ID.
`GET /references/{id}` will return a JSON version of `Reference`.
*/
org.ga4gh.models.Reference getReference(
  /**
  The ID of the `Reference`.
  */
  string id) throws GAException;

/****************  /references/{id}/bases  *******************/
/**
The query parameters for a request to `GET /references/{id}/bases`, for
example:

`GET /references/{id}/bases?start=100&end=200`
*/
record ListReferenceBasesRequest {
  /**
  The start position (0-based) of this query. Defaults to 0.
  Genomic positions are non-negative integers less than reference length.
  Requests spanning the join of circular genomes are represented as
  two requests one on each side of the join (position 0).
  */
  long start = 0;

  /**
  The end position (0-based, exclusive) of this query. Defaults
  to the length of this `Reference`.
  */
  union { null, long } end = null;

  /**
  The continuation token, which is used to page through large result sets.
  To get the next page of results, set this parameter to the value of
  `nextPageToken` from the previous response.
  */
  union { null, string } pageToken = null;
}

/** The response from `GET /references/{id}/bases` expressed as JSON. */
record ListReferenceBasesResponse {
  /**
  The offset position (0-based) of the given `sequence` from the start of this
  `Reference`. This value will differ for each page in a paginated request.
   */
  long offset = 0;

  /**
  A substring of the bases that make up this reference. Bases are represented
  as IUPAC-IUB codes; this string matches the regexp `[ACGTMRWSYKVHDBN]*`.
  */
  string sequence;

  /**
  The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.
  */
  union { null, string } nextPageToken = null;
}

/**
Lists `Reference` bases by ID and optional range.
`GET /references/{id}/bases` will return a JSON version of
`ListReferenceBasesResponse`.
*/
ListReferenceBasesResponse getReferenceBases(
  /** The ID of the `Reference`. */
  string id,
  /** Additional request parameters to restrict the query. */
  ListReferenceBasesRequest request) throws GAException;

/******************  /sequences/search  *********************/
/**
This request maps to the body of `POST /sequences/search` as JSON. Specifies a
number of filters, all of which must be satisfird by each result returned.
*/
record SearchSequencesRequest {
  /**
  If not null, return only `Sequence`s that appear in the indicated
  `ReferenceSet`, or any included `ReferenceSet`s.
  */
  union { null, string } referenceSetId = null;
  
  /**
  If not null, return only `Sequence`s that are part of the indicated
  `VariantSet`
  */
  union { null, string } variantSetId = null;

  /**
  Specifies the maximum number of results to return in a single page.
  If unspecified, a system default will be used.
  */
  union { null, int } pageSize = null;

  /**
  The continuation token, which is used to page through large result sets.
  To get the next page of results, set this parameter to the value of
  `nextPageToken` from the previous response.
  */
  union { null, string } pageToken = null;
}

/**
This is the response from `POST /sequences/search` expressed as JSON.
*/
record SearchSequencesResponse {
  /**
  The list of matching `Sequence`s.
  */
  array<org.ga4gh.models.Sequence> sequences = [];

  /**
  The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.
  */
  union { null, string } nextPageToken = null;
}

/**
Gets `Sequence`s that match the search criteria.

`POST /sequences/search` must accept a JSON version of `SearchSequencesRequest`
as the post body and will return a JSON version of `SearchSequencesResponse`.
*/
SearchSequencesResponse searchSequences(
  /**
  This request maps to the body of `POST /sequences/search` as
  JSON.
  */
  SearchSequencesRequest request) throws GAException;

/****************  /sequences/{id}  *******************/
/**
Gets a `Sequence` by ID.
`GET /sequences/{id}` will return a JSON version of `Sequence`.
*/
org.ga4gh.models.Sequence getSequence(
  /**
  The ID of the `Sequence`.
  */
  string id) throws GAException;

/****************  /sequences/{id}/bases  *******************/
/**
The query parameters for a request to `GET /sequences/{id}/bases`, for
example:

`GET /sequences/c95d4520-8c63-45f1-924d-6a9604a919fb/bases?start=100&end=200`
*/
record GetSequenceBasesRequest {
  /**
  The start position (0-based) of this query. Defaults to 0.
  Genomic positions are non-negative integers less than `Sequence` length.
  Requests spanning the join of circular genomes are represented as
  two requests one on each side of the join (position 0).
  */
  long start = 0;

  /**
  The end position (0-based, exclusive) of this query. Defaults
  to the length of this `Sequence`.
  */
  union { null, long } end = null;

  /**
  The continuation token, which is used to page through large result sets.
  To get the next page of results, set this parameter to the value of
  `nextPageToken` from the previous response.
  */
  union { null, string } pageToken = null;
}

/** The response from `GET /sequences/{id}/bases` expressed as JSON. */
record GetSequenceBasesResponse {
  /**
  The offset position (0-based) of the returned string in the sequence. This
  value will differ for each page in a paginated request.
   */
  long offset = 0;

  /**
  A substring of the sequence requested. Bases are represented as IUPAC-IUB
  codes; this string matches the regexp `[ACGTMRWSYKVHDBN]*`.
  */
  string sequence;

  /**
  The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.
  */
  union { null, string } nextPageToken = null;
}

/**
Lists bases by sequence ID and optional range. `GET /sequences/{id}/bases` will
return a JSON version of `GetSequenceBasesResponse`. Works for sequences with
associated `Reference`s, as well as novel sequences that come with
`VariantSet`s.
*/
GetSequenceBasesResponse getSequenceBases(
    /** The ID of the sequence. */
    string id,
    /** Additional request parameters to restrict the query. */
    GetSequenceBasesRequest request) throws GAException;

/****************  /joins/search  *******************/
/**
This request maps to the body of `POST /joins/search` as JSON. Specifies a
number of filters, all of which must be satisfird by each result returned.
*/
record SearchJoinsRequest {
  /**
  If present, return only `Join`s which belong to this reference set.
  */
  union { null, string } referenceSetId = null;
  
  /**
  If present, return only `Join`s which belong to this variant set.
  */
  union { null, string } variantSetId = null;

  // TODO: Specify a proper sort of filter object instead of this. We want to be
  // able to support a list of sequences, but also a single sequence and a
  // range.

  /**
  If nonempty, return only `Join`s with at least one `Position` on one of these
  sequences.
  */
  array<string> sequenceIds = [];
  
  /**
  Must not contain more entries than `sequenceIds`.
  
  Return only `Join`s with at least one `Position` on the corresponding sequence
  in `sequenceIds` at this index in the sequence or later.
  */
  array<long> starts = [];
  
  /**
  Must not contain more entries than `starts`.
  
  Return only `Join`s with at least one `Position` on the corresponding sequence
  in `sequenceIds` at or earlier than this many bases forward from the
  corresponding entry in `starts`.
  */
  array<long> lengths = [];
  
  /**
  Must not contain more entries than `sequenceIds`.
  
  Return only `Join`s which join onto the corresponding sequence in
  `sequenceIds`, in the interval specified by the corresponding entries in
  `starts` and `lengths` (if present), to the strand specified by each entry in
  `strands`.
  */
  array<org.ga4gh.models.Strand> strands = [];

  /**
  Specifies the maximum number of results to return in a single page.
  If unspecified, a system default will be used.
  */
  union { null, int } pageSize = null;

  /**
  The continuation token, which is used to page through large result sets.
  To get the next page of results, set this parameter to the value of
  `nextPageToken` from the previous response.
  */
  union { null, string } pageToken = null;
}

/**
This is the response from `POST /joins/search` expressed as JSON.
*/
record SearchJoinsResponse {
  /** The list of matching joins. */
  array<org.ga4gh.models.Join> joins = [];

  /**
  The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.
  */
  union { null, string } nextPageToken = null;
}

/**
Gets a list of `Join` matching the search criteria.

`POST /joins/search` must accept a JSON version of
`SearchJoinsRequest` as the post body and will return a JSON
version of `SearchJoinsResponse`.
*/
SearchJoinsResponse searchJoins(
  /**
  This request maps to the body of `POST /joins/search`
  as JSON.
  */
  SearchJoinsRequest request) throws GAException;
}
