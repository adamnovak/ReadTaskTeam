@namespace("org.ga4gh.interchange")

/**
Certain relationships between GA4GH data model are only exposed through API
endpoints; here we define types that are necessary for representing these
relationships on disk, for simple interchange of small data sets.

Most of these relationships are many-to-many. For example, a CallSet 

The interchange format consists of a directory containing:

* A FASTA-format file containing any sequences to be exchanged, named
"Sequence.fa". The FASTA ID for each sequence will be equal to the sequence's
ID value.

* For each top-level type to be exchanged, an Avro binary format file containing
all the records of that type in arbitrary order, named "<RecordType>.avro". For
example, all `Read` records will be in "Read.avro", all `VariantSet` will be in
`VariantSet.avro`, and so on. There will not, however, be a `Segment.avdl` file,
as `Segment` objects are not top-level records: they occur only as part of other
records.

Directories in this interchange format will be importable by the GA4GH reference
server.
*/
protocol Interchange {

import idl "common.avdl";

/**
The many-to-many relationship between `ReferenceSet`s and their contained
`Reference`s is covered by `ReferenceSet.referenceIds`. However, there may be a
very large number of `Reference`s in a `ReferenceSet`, so we allow them to be
represented by objects instead of very long arrays in
`ReferenceSet.referenceIds`.
*/
record ReferenceSetReferenceJoin {
  /**
  The ID of the `ReferenceSet`.
  */
  string referenceSetId;
  
  /**
  The ID of a `Reference` that is in that set. Note that a `Reference` can be in
  many `ReferenceSet`s.
  */
  string referenceId;
}

// The many-to-many relationship between `Variant`s and `Allele`s is
// covered by `Variant.alleleIds`

// The many-to-many relationship between `CallSet`s and `VariantSet`s is
// covered by `CallSet.variantSetIds`

/**
The end joins of novel sequences used in `VariantSet`s are exposed only through
the `searchVariantSetSequences()` and `getVariantSetSequence()` methods, so we
define a record to represent novel sequences in `VariantSet`s here.
*/
record VariantSetSequence {
  /**
  The ID of the `VariantSet`.
  */
  string variantSetId;
  
  /**
  The sequence that is a novel sequence in that `VaraintSet`, with its
  `startJoin` and `endJoin` describing where the sequence belongs in the
  sequence graph.
  */
  org.ga4gh.models.Segment sequence;
}

}
